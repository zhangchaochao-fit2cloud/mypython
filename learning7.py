# 函数
print("-" * 10, "函数", "-" * 10)

# 语法
'''
def 函数名([形参1, 形参2, 形参3...])
    代码块
'''


def test(v1, v2):
    print("这是一个测试函数")
    print("参数为:", v1, v2)


# 函数的形参可以有默认值
def test2(v1=5, v2=20, v3=40):
    print("这是一个测试函数")
    print("参数为:", v1, v2, v3)


# *代表接收所有参数(不定长参数),类型为tuple(元组)
def test3(*a):
    print("a:", a)


# * 会接收后面的所有值,所以c参数必须以关键字传递
def test4(a, *b, c):
    print("a:", a)
    print("b:", b)
    print("c:", c)


# * 在首位,要求所有参数都必须以关键词传递,* 不接收关键词参数
def test5(*, a, b, c):
    print("a:", a)
    print("b:", b)
    print("c:", c)


# ** 允许接收关键词参数/类型为dict(字典)
def test6(**a):
    print("a:", a)


test(2, 3)

# 实参,可以指定值(位置参数)
# 关键字和位置参数混合使用, 位置参数必须写在前面
test2(3, v2=2)

# 函数在调用时,解析器不会检查实参的类型
# 实参可以传递任意类型的对象

test3(1, 2, 3, 4)

test4(1, 2, 3, c=4)

test5(a=2, b=3, c=4)

test6(a=2, b=3, c=4)


print("-" * 10, "解包", "-" * 10)


def test7(a, b, c):
    print("a:", a)
    print("b:", b)
    print("c:", c)


# 元组
d = (10, 20, 30)
# 列表
e = [10, 20, 30]
# 字典
f = {'a': 10, 'b': 20, 'c': 30}

# 传递实参时,也可以在序列类型的参数前添加*,会自动将序列中的元素一次作为参数传递
# 要求序列中元素的个数必须和形参的个数一致
# * 对元组解包
test7(*d)
# * 对列表解包
test7(*e)
# ** 对字典解包
test7(**f)


print("-" * 10, "返回值", "-" * 10)




